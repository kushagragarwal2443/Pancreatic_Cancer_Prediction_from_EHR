import streamlit as st
import joblib
import pickle
import numpy as np
import pandas as pd
import sklearn
from sklearn.neural_network import MLPRegressor

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# st.sidebar.success("Navigate the dashboards above.")

st.title("Model Predictions")
st.markdown("This interactive dashboard would allow you to predict if you have pancreatic cancer in real-time")

st.subheader("Prediction of Pancreatic Cancer")
# st.markdown("This interactive dashboard allows you to predict # Covid cases and # Covid related deaths provided the normalized google search numbers for different Covid related queries. Additionally you can choose the model you wish to produce the predictions on. Given the compute constraints the dashboard supports this visualization just for the state of Pennsylvania.")

models = ["Logistic Regression", "Random Forest", "Support Vector Machines", "Multi Layer Perceptron 1", "Multi Layer Perceptron 2", "Multi Layer Perceptron 3", "Multi Layer Perceptron 4", "Multi Layer Perceptron 5"]
corr_models = ["LR", "RF", "SVM", "MLP1", "MLP2", "MLP3", "MLP4", "MLP5"]

icd_codes_mapping = {'3961_9': 0, '02HV33Z_10': 1, '0DJ08ZZ_10': 2, '3E0G76Z_10': 3, '0W9G3ZX_10': 4, '0W9G3ZZ_10': 5, '5A1935Z_10': 6, '0BH17EZ_10': 7, '0DH63UZ_10': 8, '0FPB8DZ_10': 9, '0F798DZ_10': 10, '0FB98ZX_10': 11, 'BF10YZZ_10': 12, '5211_9': 13, '3950_9': 14, '4513_9': 15, '8874_9': 16, '4443_9': 17, '8847_9': 18, '8848_9': 19, '3893_9': 20, '3897_9': 21, '0045_9': 22, '0040_9': 23, '9672_9': 24, '9604_9': 25, '5293_9': 26, '5187_9': 27, '5185_9': 28, '3E04305_10': 29, '0W9G30Z_10': 30, '0FT40ZZ_10': 31, '0FBG0ZZ_10': 32, '0DB90ZZ_10': 33, '0FBG4ZX_10': 34, '0DT90ZZ_10': 35, '00HU33Z_10': 36, '0331_9': 37, '9671_9': 38, '5A1221Z_10': 39, '527_9': 40, '5114_9': 41, '3E0436Z_10': 42, '0FC98ZZ_10': 43, '3723_9': 44, '8856_9': 45, '0FBG8ZX_10': 46, '5A1945Z_10': 47, '0F9530Z_10': 48, '0F2BX0Z_10': 49, '741_9': 50, '0F9430Z_10': 51, '5421_9': 52, '02100Z9_10': 53, '8938_9': 54, '3899_9': 55, '8838_9': 56, '5011_9': 57, '4516_9': 58, '4523_9': 59, '0066_9': 60, '3722_9': 61, '3E0T3TZ_10': 62, '0309_9': 63, '5491_9': 64, '966_9': 65, '3491_9': 66, '8607_9': 67, '9925_9': 68, '7569_9': 69, '0390_9': 70, '0FD98ZX_10': 71, '0W9930Z_10': 72, '5123_9': 73, '3615_9': 74, '8952_9': 75, '8744_9': 76, '3734_9': 77, '5122_9': 78, 'B211YZZ_10': 79, '10E0XZZ_10': 80, '0FB03ZX_10': 81, '07BB0ZZ_10': 82, '3995_9': 83, '3895_9': 84, '5110_9': 85, '9915_9': 86, '5459_9': 87, '3404_9': 88, '8842_9': 89, '8604_9': 90, '3324_9': 91, '3E0H76Z_10': 92, '8E0W4CZ_10': 93, '9755_9': 94, '9705_9': 95, '415_9': 96, '0DB98ZX_10': 97, '5212_9': 98, '5012_9': 99, '4011_9': 100, '4439_9': 101, '4639_9': 102, '5198_9': 103, '8751_9': 104, '8754_9': 105, '0F793DZ_10': 106, '8162_9': 107, '5252_9': 108, '0D798DZ_10': 109, '9904_9': 110, '0FB13ZX_10': 111, '3E03305_10': 112, '0WJG4ZZ_10': 113, '5101_9': 114, '5188_9': 115, '9229_9': 116, '0W9B30Z_10': 117, '3891_9': 118, '8872_9': 119, '02H633Z_10': 120, '0DJD8ZZ_10': 121, '0F7D8DZ_10': 122, '5014_9': 123, '9227_9': 124, '0FB90ZZ_10': 125, '5137_9': 126, '0DB60ZZ_10': 127, '9427_9': 128, '4525_9': 129, '5A1955Z_10': 130, '3607_9': 131, '5A1D70Z_10': 132, '0F9930Z_10': 133, '8191_9': 134, '5A1D60Z_10': 135, '9962_9': 136}
ndc_mapping = {517570425: 0, 121065721: 1, 56017275: 2, 0: 3, 338001702: 4, 63739027201: 5, 781305714: 6, 409672924: 7, 54839224: 8, 74241612: 9, 182844789: 10, 10019016312: 11, 51079025520: 12, 409125830: 13, 56017075: 14, 409176230: 15, 121054410: 16, 51079045620: 17, 54569523500: 18, 56016975: 19, 904526161: 20, 63323026965: 21, 703450204: 22, 338004938: 23, 55390000401: 24, 338011704: 25, 904224461: 26, 904404073: 27, 713016550: 28, 338070341: 29, 2821501: 30, 409490234: 31, 58177020211: 32, 61553008348: 33, 574705050: 34, 338008504: 35, 206886202: 36, 409128331: 37, 338004903: 38, 409729501: 39, 63323010605: 40, 904272561: 41, 61553005148: 42, 121197100: 43, 63323026201: 44, 63323061603: 45, 59011041020: 46, 338004902: 47, 409610202: 48, 121483940: 49, 25021067376: 50, 121457735: 51, 43825010201: 52, 904644461: 53, 338070948: 54, 409610204: 55, 944049505: 56, 904054460: 57, 641607825: 58, 409471332: 59, 591352530: 60, 944049302: 61, 61553020648: 62, 60258000601: 63, 904053061: 64, 59011042020: 65, 8290306525: 66, 338355248: 67, 51079007220: 68, 64980010401: 69, 32909071503: 70, 11523726808: 71, 51079096620: 72, 904645561: 73, 641612525: 74, 264958720: 75, 49281041688: 76, 338001703: 77, 409665305: 78, 536338101: 79, 338067104: 80, 8092360: 81, 409475503: 82, 338519741: 83, 603155404: 84, 66758016013: 85, 338004304: 86, 338004904: 87, 8084199: 88, 338008904: 89, 76329301205: 90, 67467064301: 91, 406055262: 92, 8092355: 93, 406717162: 94, 338105548: 95, 338055318: 96, 51079007320: 97, 904504260: 98, 944049301: 99, 66553000401: 100, 50383077933: 101, 338630403: 102, 76439034310: 103, 63323096520: 104, 49281041550: 105, 487980125: 106, 37205011278: 107, 409427601: 108, 60505068104: 109, 264310511: 110, 338001704: 111, 409662502: 112, 904516561: 113, 904568461: 114, 2751001: 115, 88222033: 116, 8290306513: 117, 904640161: 118, 8290306510: 119, 60505251903: 120, 38396055018: 121, 597026010: 122, 904673061: 123, 54817525: 124, 536242558: 125, 63323016501: 126, 338001738: 127, 63323001302: 128, 8290306424: 129, 338004911: 130, 70860077602: 131, 68084035401: 132, 409198530: 133, 23155029442: 134, 68084007001: 135, 904677361: 136, 42292000120: 137, 63739049910: 138, 51079052420: 139, 51079068420: 140, 904198861: 141, 904652261: 142, 51079075920: 143, 54162000708: 144, 23050601: 145, 409707714: 146, 121043130: 147, 57896045208: 148, 57896042101: 149, 64253033335: 150, 406324301: 151, 68016001129: 152, 63739035810: 153, 32121201: 154, 6494300: 155, 54162055007: 156, 409189001: 157, 51079098320: 158, 51079041720: 159, 51079069020: 160, 50242004164: 161, 51079054220: 162, 409665106: 163, 182050789: 164, 172375810: 165, 6473900: 166, 186109239: 167, 51991045757: 168, 49502069724: 169, 51079038620: 170, 54868003404: 171, 487020101: 172, 61553011841: 173, 406833062: 174, 50242004413: 175, 904598061: 176, 904399061: 177, 406831562: 178, 409433201: 179, 904623561: 180, 66685100101: 181, 245004101: 182, 641608025: 183, 58177029311: 184, 49281001350: 185, 173068224: 186, 74518211: 187, 904198261: 188, 51079088120: 189, 66689040150: 190, 641037625: 191, 75062040: 192, 74455211: 193, 338001731: 194, 641092825: 195, 904647461: 196, 409131230: 197, 338012504: 198, 409477702: 199, 409781124: 200, 74662411: 201, 59011044225: 202, 574027511: 203, 121176130: 204, 409672923: 205, 406051262: 206, 487950101: 207, 63323061401: 208, 63739035410: 209, 3089431: 210, 63323031119: 211, 904628889: 212, 51079045120: 213, 641607325: 214, 51079000220: 215, 206885216: 216, 68084034701: 217, 63323031461: 218, 51079020520: 219, 187170405: 220, 781207601: 221, 173071920: 222, 904582460: 223, 338105102: 224, 8290036005: 225, 63481068706: 226, 182864389: 227, 409792337: 228, 74233411: 229, 182845389: 230, 182178989: 231, 51079008620: 232, 904150061: 233, 51079012620: 234, 10432017002: 235, 310032520: 236, 338500241: 237, 409915801: 238, 904530661: 239, 63323031110: 240, 60505260400: 241, 904642281: 242, 2831501: 243, 68084025901: 244, 63323049289: 245, 409739172: 246, 597007575: 247, 93521193: 248, 63653117103: 249, 456066270: 250, 63739002401: 251, 603385521: 252, 51079045420: 253, 33332001201: 254, 51079090620: 255, 517571025: 256, 17478093401: 257, 54848616: 258, 338004931: 259, 55390034810: 260, 19515090941: 261, 2871501: 262, 42858030125: 263, 63323054011: 264, 61553012011: 265, 51079029420: 266, 904627761: 267, 173069604: 268, 517570225: 269, 409177805: 270, 62584026501: 271, 904585461: 272, 19515089452: 273, 69543037910: 274, 143987310: 275, 55390007710: 276, 51079010520: 277, 54001820: 278, 338358048: 279, 409610210: 280, 56017675: 281, 60505082901: 282, 49999002812: 283, 245005301: 284, 33332001001: 285, 172531210: 286, 51079097220: 287, 10019017644: 288, 54023524: 289, 378003201: 290, 172438210: 291, 641040012: 292, 68084052401: 293, 51079028520: 294, 409779362: 295, 75062280: 296, 66553000801: 297, 121174410: 298, 54872425: 299, 172376010: 300, 904634061: 301, 62584089701: 302, 51079080120: 303, 338080704: 304, 71015892: 305, 63323047401: 306, 68084053901: 307, 904580961: 308, 68084008901: 309, 182116189: 310, 63323036920: 311, 55390007310: 312, 68084065901: 313, 169750111: 314}
chart_final_mapping = {'50861:MED': 0, '50862:MED': 1, '50863:MED': 2, '50867:MED': 3, '50868:MED': 4, '50878:MED': 5, '50882:MED': 6, '50885:MED': 7, '50902:MED': 8, '50912:MED': 9, '50920:MED': 10, '50930:MED': 11, '50954:MED': 12, '50971:MED': 13, '50976:MED': 14, '50983:MED': 15, '51006:MED': 16, '51221:MED': 17, '51222:MED': 18, '51248:MED': 19, '51249:MED': 20, '51250:MED': 21, '51265:MED': 22, '51277:MED': 23, '51279:MED': 24, '51301:MED': 25, '51237:MED': 26, '51274:MED': 27, '51275:MED': 28, '50852:MED': 29, '51613:MED': 30, '50931:MED': 31, '51464:MED': 32, '51466:MED': 33, '51478:MED': 34, '51484:MED': 35, '51486:MED': 36, '51487:MED': 37, '51491:MED': 38, '51492:MED': 39, '51498:MED': 40, '51506:MED': 41, '51508:MED': 42, '51514:MED': 43, '50802:MED': 44, '50804:MED': 45, '50806:MED': 46, '50808:MED': 47, '50809:MED': 48, '50810:HIGH': 49, '50811:HIGH': 50, '50812:MED': 51, '50813:MED': 52, '50818:MED': 53, '50820:MED': 54, '50821:MED': 55, '50822:MED': 56, '50824:MED': 57, '50828:MED': 58, '50810:MED': 59, '50811:MED': 60, '52033:MED': 61, '51214:MED': 62, '50817:MED': 63, '50868:LOW': 64, '50960:MED': 65, '50956:MED': 66, '51146:MED': 67, '51200:MED': 68, '51244:MED': 69, '51254:MED': 70, '51256:MED': 71, '50887:MED': 72, '50893:MED': 73, '50970:MED': 74, '51116:MED': 75, '51118:MED': 76, '51120:MED': 77, '51125:MED': 78, '51127:MED': 79, '52065:MED': 80, '51133:MED': 81, '52069:MED': 82, '52073:MED': 83, '52074:MED': 84, '52075:MED': 85, '52135:MED': 86, '52172:MED': 87, '50883:MED': 88, '50884:MED': 89, '50816:MED': 90, '50819:MED': 91, '50825:MED': 92, '50826:MED': 93, '50827:MED': 94, '50826:HIGH': 95, '51266:MED': 96, '51463:MED': 97, '51476:MED': 98, '51493:MED': 99, '51512:MED': 100, '51516:MED': 101, '51519:MED': 102, '51117:LOW': 103, '51009:MED': 104, '50924:MED': 105, '50952:MED': 106, '50953:LOW': 107, '50998:MED': 108, '50864:MED': 109, '50856:MED': 110, '50879:MED': 111, '50880:MED': 112, '50910:MED': 113, '50922:MED': 114, '50934:MED': 115, '50947:MED': 116, '50981:MED': 117, '50999:MED': 118, '51678:MED': 119, '50955:MED': 120, '51087:MED': 121, '51107:MED': 122, '51103:MED': 123, '50930:HIGH': 124, '50868:HIGH': 125, '51082:MED': 126, '51093:MED': 127, '51100:MED': 128, '51104:MED': 129, '51501:MED': 130, '50835:MED': 131, '50842:MED': 132, '50843:MED': 133, '50849:MED': 134, '51117:MED': 135, '51123:MED': 136, '50933:MED': 137, '51469:MED': 138, '50836:MED': 139, '50838:MED': 140, '51117:HIGH': 141, '51003:MED': 142, '50810:LOW': 143, '50811:LOW': 144, '50911:MED': 145, '51000:MED': 146, '50993:MED': 147, '50995:MED': 148, '50979:MED': 149, '50919:MED': 150, '51257:MED': 151, '50873:MED': 152, '50876:MED': 153, '50903:MED': 154, '50904:MED': 155, '50905:MED': 156, '50907:MED': 157, '50925:MED': 158, '50935:MED': 159, '50940:MED': 160, '50941:MED': 161, '50942:MED': 162, '50943:MED': 163, '50949:MED': 164, '50950:MED': 165, '50951:MED': 166, '50953:MED': 167, '51010:MED': 168, '51657:MED': 169, '51658:MED': 170, '51659:MED': 171, '51663:MED': 172, '51282:MED': 173, '51283:MED': 174, '50900:MED': 175, '51137:MED': 176, '51143:MED': 177, '51144:MED': 178, '51233:MED': 179, '51246:MED': 180, '51251:MED': 181, '51252:MED': 182, '51255:MED': 183, '51267:MED': 184, '51268:MED': 185, '51296:MED': 186, '51145:MED': 187, '51255:HIGH': 188, '51269:MED': 189, '51260:MED': 190, '51839:MED': 191, '52171:MED': 192, '51287:MED': 193, '51462:MED': 194, '51482:MED': 195, '52111:MED': 196, '51134:MED': 197, '51144:HIGH': 198, '51292:MED': 199, '50866:MED': 200, '50825:HIGH': 201, '52023:MED': 202, '51147:MED': 203, '51513:MED': 204, '50853:MED': 205, '51071:MED': 206, '51074:MED': 207, '51075:MED': 208, '51079:MED': 209, '51090:MED': 210, '51092:MED': 211, '51989:MED': 212, '51294:MED': 213, '51732:MED': 214, '51733:MED': 215, '51734:MED': 216, '51735:MED': 217, '51736:MED': 218, '51737:MED': 219, '52004:MED': 220, '52005:LOW': 221, '52006:MED': 222, '52007:MED': 223, '52008:MED': 224, '52009:HIGH': 225, '52010:MED': 226, '51564:MED': 227, '53153:MED': 228, '51706:MED': 229, '50965:MED': 230, '50871:MED': 231, '50907:HIGH': 232, '50953:HIGH': 233, '51865:MED': 234, '51873:MED': 235, '50889:MED': 236, '50927:MED': 237, '51007:MED': 238, '51579:MED': 239, '50874:MED': 240, '50963:MED': 241, '51446:MED': 242, '51447:MED': 243, '51450:MED': 244, '51453:MED': 245, '51455:MED': 246, '51457:MED': 247, '52391:MED': 248, '51051:HIGH': 249, '51053:MED': 250, '51054:MED': 251, '51059:HIGH': 252, '50831:MED': 253, '51046:MED': 254, '51085:MED': 255, '52004:HIGH': 256, '52005:MED': 257, '52009:MED': 258, '51613:HIGH': 259, '51790:MED': 260, '51802:MED': 261, '52264:MED': 262, '52272:MED': 263, '52281:MED': 264, '52285:MED': 265, '52286:MED': 266, '50816:LOW': 267, '50877:MED': 268, '51078:MED': 269, '51097:MED': 270, '51288:MED': 271, '50915:MED': 272, '51218:MED': 273, '50895:MED': 274, '50896:MED': 275, '50994:MED': 276, '51001:MED': 277, '51005:MED': 278, '51069:MED': 279, '51070:MED': 280, '51518:MED': 281, '50905:HIGH': 282, '50906:MED': 283, '50903:HIGH': 284, '50907:LOW': 285, '51737:LOW': 286, '52004:LOW': 287, '50909:MED': 288, '51197:MED': 289, '51219:MED': 290, '50905:LOW': 291, '50930:LOW': 292, '50937:MED': 293, '51660:MED': 294, '51663:HIGH': 295, '50964:HIGH': 296, '50815:MED': 297, '51229:MED': 298, '51752:MED': 299, '50803:MED': 300, '51259:MED': 301, '51098:MED': 302, '51102:MED': 303, '50975:MED': 304, '51216:MED': 305, '50964:MED': 306, '51099:MED': 307, '51497:MED': 308, '51737:HIGH': 309, '50948:MED': 310, '50884:HIGH': 311, '50908:MED': 312, '50908:HIGH': 313, '51231:MED': 314, '50917:MED': 315, '51130:MED': 316, '51131:MED': 317, '51132:MED': 318, '51176:MED': 319, '51180:MED': 320, '51181:MED': 321, '51194:MED': 322, '51245:MED': 323, '51300:MED': 324, '52769:MED': 325, '51089:MED': 326, '51245:LOW': 327, '51059:MED': 328, '51448:MED': 329, '50831:HIGH': 330, '51474:MED': 331, '51213:MED': 332, '51479:MED': 333, '51143:HIGH': 334, '52425:MED': 335, '50831:LOW': 336, '51054:HIGH': 337, '50946:MED': 338, '51196:MED': 339, '51613:LOW': 340, '50974:MED': 341, '50932:MED': 342, '51236:MED': 343, '51067:MED': 344, '51094:MED': 345, '51108:MED': 346, '50996:MED': 347, '50964:LOW': 348, '51051:MED': 349, '50825:LOW': 350, '52036:MED': 351, '50988:MED': 352, '51094:LOW': 353, '50986:MED': 354, '50950:HIGH': 355, '51625:HIGH': 356, '51626:MED': 357, '51627:MED': 358, '50881:HIGH': 359, '51625:MED': 360, '51245:HIGH': 361, '51051:LOW': 362, '51059:LOW': 363, '50967:MED': 364, '50801:MED': 365, '50816:HIGH': 366, '50823:MED': 367, '51659:LOW': 368, '51026:MED': 369, '50801:HIGH': 370, '50823:HIGH': 371, '50892:MED': 372, '50881:MED': 373, '51626:HIGH': 374, '50927:HIGH': 375, '51261:MED': 376, '51148:MED': 377, '51240:MED': 378, '50898:MED': 379, '50895:LOW': 380, '50896:HIGH': 381, '51005:HIGH': 382, '50801:LOW': 383, '50823:LOW': 384, '51736:HIGH': 385, '52008:HIGH': 386, '50815:HIGH': 387, '50908:LOW': 388, '52005:HIGH': 389, '52006:HIGH': 390, '51228:MED': 391, '50843:HIGH': 392, '51067:HIGH': 393, '51108:HIGH': 394, '51790:HIGH': 395, '50903:LOW': 396, '51118:HIGH': 397, '51148:HIGH': 398, '51008:MED': 399, '50914:MED': 400, '50950:LOW': 401, '51269:HIGH': 402, '50978:MED': 403, '50826:LOW': 404, '50819:HIGH': 405, '51259:HIGH': 406, '51123:HIGH': 407, '51300:HIGH': 408, '51802:HIGH': 409, '50819:LOW': 410, '52007:HIGH': 411, '51790:LOW': 412, '51736:LOW': 413, '52010:HIGH': 414, '52008:LOW': 415, '51094:HIGH': 416, '50895:HIGH': 417, '50896:LOW': 418, '51627:HIGH': 419, '51735:HIGH': 420, '50892:HIGH': 421, '51108:LOW': 422, '51657:HIGH': 423, '51005:LOW': 424, '50961:MED': 425, '50898:HIGH': 426, '51659:HIGH': 427, '51269:LOW': 428, '52769:HIGH': 429}

model_descriptions = [
    "LogisticRegression(class_weight='balanced', C=0.5, max_iter=1000))",
    "RandomForestClassifier(class_weight='balanced', n_estimators=10))",
    "SVC(class_weight='balanced', C=0.5))",
    "1 Hidden Layer with 100 Neurons",
    "2 Hidden Layer with 50 and 50 Neurons respectively",
    "2 Hidden Layer with 100 and 50 Neurons respectively",
    "3 Hidden Layer with 200, 100, and 50 Neurons respectively",
    "4 Hidden Layer with 300, 200, 100, and 50 Neurons respectively"
]
model_description = pd.DataFrame({'Model': models, 'Architecture':model_descriptions})
st.dataframe(model_description, hide_index=True)

model_name = st.selectbox("Select Model:", list(models))
index = models.index(model_name)
model_name = corr_models[index]

query_groups = ['Gender', 'Medications', 'Procedures', 'Lab Values']
query_descriptions = [
    "Gender of the Person: Male/Female",
    "NDC codes of Medications given to the patient",
    "ICD9 or ICD10 codes of the Procedures performed on the patient",
    "IDs and resulting values (HIGH/MED/LOW) of Lab tests prescribed to the patient ",
]
feature_description = pd.DataFrame({'Features': query_groups, 'Descriptions':query_descriptions})
st.dataframe(feature_description, hide_index=True)

medications_text = "904198861, 409491134, 603385521, 121176130, 51079045120, 51079045620, 6473900, 63739002401, 33332001001, 51079075920, 63653117103, 338004304, 0, 904632261, 68084034601, 904632261, 66553000201, 68084059101, 904640861, 904629261, 0, 904053061, 19515090941, 63323026201, 60505251903, 68084034601, 904629261, 904198861, 904640861, 68084059101, 904632261, 904628889, 904629261, 0, 338358048, 904053061, 121197100, 0, 904640861, 63323026201"
procedures_text = "3950_9, 3990_9, 8848_9, 0047_9, 0042_9, 0JH606Z_10, 02H63JZ_10, 0JPT0PZ_10, 02HK3JZ_10"
labvalues_text = "'50902:MED', '50910:MED', '50911:MED', '50971:MED', '50983:MED', '51265:MED', '50902:MED', '50910:MED', '50911:MED', '50912:MED', '50920:MED', '50971:MED', '50983:MED', '51006:MED', '51221:MED', '51265:MED', '50868:MED', '50882:MED', '50893:MED', '50902:MED', '50912:MED', '50920:MED', '50931:MED', '50960:MED', '50970:MED', '50971:MED', '50983:MED', '51006:MED', '51146:MED', '51200:MED', '51221:MED', '51222:MED', '51244:MED', '51248:MED', '51249:MED', '51250:MED', '51254:MED', '51256:MED', '51265:MED', '51277:MED', '51279:MED', '51301:MED', '51237:MED', '51274:MED', '51275:MED', '51003:MED', '50813:MED', '52033:MED', '51003:MED', '50868:MED', '50882:MED', '50902:MED', '50912:MED', '50920:MED', '50931:MED', '50934:MED', '50947:MED', '50963:MED', '50971:MED', '50983:MED', '51006:MED', '51678:MED', '51237:MED', '51274:MED', '51275:MED', '50934:MED', '50947:MED', '51003:MED', '51678:MED', '51133:MED', '51137:MED', '51143:MED', '51144:MED', '51146:MED', '51200:MED', '51221:MED', '51222:MED', '51233:MED', '51244:MED', '51246:MED', '51248:MED', '51249:MED', '51250:MED', '51251:MED', '51252:MED', '51254:MED', '51255:MED', '51256:MED', '51257:MED', '51265:MED', '51266:MED', '51267:MED', '51268:MED', '51277:MED', '51279:MED', '51301:MED', '52069:MED', '52073:MED', '52074:MED', '52075:MED', '52172:MED', '50933:MED', '51463:MED', '51464:MED', '51466:MED', '51476:MED', '51478:MED', '51484:MED', '51486:MED', '51487:MED', '51491:MED', '51492:MED', '51493:MED', '51498:MED', '51506:MED', '51508:MED', '51512:MED', '51514:MED', '51516:MED', '51519:MED', '51087:MED', '51103:MED', '50934:MED', '50947:MED', '51003:MED', '51678:MED', '50934:MED', '50947:MED', '51003:MED', '51678:MED', '50868:MED', '50882:MED', '50893:MED', '50902:MED', '50910:MED', '50911:MED', '50912:MED', '50920:MED', '50931:MED', '50934:MED', '50947:MED', '50960:MED', '50970:MED', '50971:MED', '50983:MED', '51006:MED', '51678:MED', '51133:MED', '51137:MED', '51143:MED', '51144:MED', '51146:MED', '51200:MED', '51221:MED', '51222:MED', '51233:MED', '51244:MED', '51246:MED', '51248:MED', '51249:MED', '51250:MED', '51251:MED', '51252:MED', '51254:MED', '51255:MED', '51256:MED', '51265:MED', '51266:MED', '51267:MED', '51268:MED', '51277:MED', '51279:MED', '51301:MED', '52069:MED', '52073:MED', '52074:MED', '52075:MED', '52172:MED', '50934:MED', '50947:MED', '51003:MED', '51678:MED', '50887:MED', '50813:MED', '51221:MED', '51222:MED', '51248:MED', '51249:MED', '51250:MED', '51265:MED', '51277:MED', '51279:MED', '51301:MED', '52172:MED', '50868:MED', '50882:MED', '50893:MED', '50902:MED', '50912:MED', '50931:MED', '50934:MED', '50947:MED', '50960:MED', '50970:MED', '50971:MED', '50983:MED', '51006:MED', '51678:MED', '50887:MED', '50934:MED', '50947:MED', '50955:MED', '51003:MED', '51678:MED', '51133:MED', '51144:MED', '51146:MED', '51200:MED', '51221:MED', '51222:MED', '51244:MED', '51248:MED', '51249:MED', '51250:MED', '51254:MED', '51256:MED', '51265:MED', '51266:MED', '51277:MED', '51279:MED', '51301:MED', '52069:MED', '52073:MED', '52074:MED', '52075:MED', '52171:MED', '52172:MED', '50868:MED', '50882:MED', '50893:MED', '50902:MED', '50912:MED', '50920:MED', '50931:MED', '50934:MED', '50947:MED', '50960:MED', '50970:MED', '50971:MED', '50983:MED', '51006:MED', '51678:MED', '50933:MED', '51221:MED', '51222:MED', '51248:MED', '51249:MED', '51250:MED', '51265:MED', '51277:MED', '51279:MED', '51301:MED', '52172:MED', '50868:MED', '50882:MED', '50902:MED', '50912:MED', '50931:MED', '50934:MED', '50947:MED', '50960:MED', '50970:MED', '50971:MED', '50983:MED', '51006:MED', '51678:MED'"

gender_text = st.text_input("Gender:", "Female")
medications_text = st.text_area("Medications:", medications_text)
procedures_text = st.text_area("Procedures:", procedures_text)
labvalues_text = st.text_area("Lab Values:", labvalues_text)

if st.button("Predict"):

    if(gender_text == "Male"):
        gender_val = 0
    else:
        gender_val = 1

    medications_vector = np.zeros(len(ndc_mapping),dtype=int)
    medications_text = medications_text.split(",")
    for medication in medications_text:
        medication = int(medication.strip())
        if(medication in ndc_mapping):
            medications_vector[ndc_mapping[medication]] = 1

    procedures_vector = np.zeros(len(icd_codes_mapping),dtype=int)
    procedures_text = procedures_text.split(",")
    for procedure in procedures_text:
        procedure = procedure.strip()
        if(procedure in icd_codes_mapping):
            procedures_vector[icd_codes_mapping[procedure]] = 1

    labvalues_vector = np.zeros(len(chart_final_mapping),dtype=int)
    labvalues_text = labvalues_text.split(",")
    for labval in labvalues_text:
        labval = labval.strip()[1:][:-1]
        if(labval in chart_final_mapping):
            labvalues_vector[chart_final_mapping[labval]] = 1

    final_vector = np.insert(procedures_vector, 0, gender_val)
    final_vector = np.concatenate((final_vector, medications_vector))
    final_vector = np.concatenate((final_vector, labvalues_vector)).reshape(1, -1)

    # print(final_vector)
    # print(np.sum(final_vector))
    # print(final_vector.shape)

    name = './EHR_Models/' + str(model_name) + "_model.pkl"
    with open(name, 'rb') as file:
        loaded_model = pickle.load(file)
    pancan_pred = loaded_model.predict(np.ones(883).reshape(1,-1))
    print(pancan_pred)
    st.write(pancan_pred)
    
    st.markdown(
        f"""
        <div style="background-color: #ADD8A0; padding: 10px; border-radius: 10px;">
            <h4 style="color: #234233;">Pancreatic Cancer Prediction:</h4>
        </div>
        """,
        unsafe_allow_html=True
    )
    st.markdown(
        """
        <style>
            .streamlit-text-container {
                font-size: 18px !important;
                color: #ADD8E6 !important;
            }
        </style>
        """,
        unsafe_allow_html=True
    )

    if(pancan_pred < 0.5):
        verdict = 0
    else:
        verdict = 1

    cols = st.columns(2)
    with cols[0]:
        st.error(f"Verdict: {verdict}")
    with cols[1]:
        st.warning(f"Probability of Pancreatic Cancer: {pancan_pred}")

